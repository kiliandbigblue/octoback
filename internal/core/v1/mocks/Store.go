// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	corev1 "github.com/kiliandbigblue/octoback/gen/proto/go/octoback/core/v1"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// DeleteGroceryList provides a mock function with given fields: id
func (_m *Store) DeleteGroceryList(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroceryList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_DeleteGroceryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroceryList'
type Store_DeleteGroceryList_Call struct {
	*mock.Call
}

// DeleteGroceryList is a helper method to define mock.On call
//   - id string
func (_e *Store_Expecter) DeleteGroceryList(id interface{}) *Store_DeleteGroceryList_Call {
	return &Store_DeleteGroceryList_Call{Call: _e.mock.On("DeleteGroceryList", id)}
}

func (_c *Store_DeleteGroceryList_Call) Run(run func(id string)) *Store_DeleteGroceryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Store_DeleteGroceryList_Call) Return(_a0 error) *Store_DeleteGroceryList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_DeleteGroceryList_Call) RunAndReturn(run func(string) error) *Store_DeleteGroceryList_Call {
	_c.Call.Return(run)
	return _c
}

// GroceryList provides a mock function with given fields: id
func (_m *Store) GroceryList(id string) (*corev1.GroceryList, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GroceryList")
	}

	var r0 *corev1.GroceryList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*corev1.GroceryList, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *corev1.GroceryList); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.GroceryList)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GroceryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroceryList'
type Store_GroceryList_Call struct {
	*mock.Call
}

// GroceryList is a helper method to define mock.On call
//   - id string
func (_e *Store_Expecter) GroceryList(id interface{}) *Store_GroceryList_Call {
	return &Store_GroceryList_Call{Call: _e.mock.On("GroceryList", id)}
}

func (_c *Store_GroceryList_Call) Run(run func(id string)) *Store_GroceryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Store_GroceryList_Call) Return(_a0 *corev1.GroceryList, _a1 error) *Store_GroceryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GroceryList_Call) RunAndReturn(run func(string) (*corev1.GroceryList, error)) *Store_GroceryList_Call {
	_c.Call.Return(run)
	return _c
}

// GroceryLists provides a mock function with given fields:
func (_m *Store) GroceryLists() ([]*corev1.GroceryList, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GroceryLists")
	}

	var r0 []*corev1.GroceryList
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*corev1.GroceryList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*corev1.GroceryList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*corev1.GroceryList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_GroceryLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroceryLists'
type Store_GroceryLists_Call struct {
	*mock.Call
}

// GroceryLists is a helper method to define mock.On call
func (_e *Store_Expecter) GroceryLists() *Store_GroceryLists_Call {
	return &Store_GroceryLists_Call{Call: _e.mock.On("GroceryLists")}
}

func (_c *Store_GroceryLists_Call) Run(run func()) *Store_GroceryLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_GroceryLists_Call) Return(_a0 []*corev1.GroceryList, _a1 error) *Store_GroceryLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Store_GroceryLists_Call) RunAndReturn(run func() ([]*corev1.GroceryList, error)) *Store_GroceryLists_Call {
	_c.Call.Return(run)
	return _c
}

// SetGroceryList provides a mock function with given fields: gl
func (_m *Store) SetGroceryList(gl *corev1.GroceryList) error {
	ret := _m.Called(gl)

	if len(ret) == 0 {
		panic("no return value specified for SetGroceryList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*corev1.GroceryList) error); ok {
		r0 = rf(gl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_SetGroceryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGroceryList'
type Store_SetGroceryList_Call struct {
	*mock.Call
}

// SetGroceryList is a helper method to define mock.On call
//   - gl *corev1.GroceryList
func (_e *Store_Expecter) SetGroceryList(gl interface{}) *Store_SetGroceryList_Call {
	return &Store_SetGroceryList_Call{Call: _e.mock.On("SetGroceryList", gl)}
}

func (_c *Store_SetGroceryList_Call) Run(run func(gl *corev1.GroceryList)) *Store_SetGroceryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*corev1.GroceryList))
	})
	return _c
}

func (_c *Store_SetGroceryList_Call) Return(_a0 error) *Store_SetGroceryList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_SetGroceryList_Call) RunAndReturn(run func(*corev1.GroceryList) error) *Store_SetGroceryList_Call {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
