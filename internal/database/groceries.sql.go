// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: groceries.sql

package database

import (
	"context"
)

const createGroceryList = `-- name: CreateGroceryList :one
INSERT INTO grocery_list (name) VALUES ($1) RETURNING id, name, created_at, version
`

func (q *Queries) CreateGroceryList(ctx context.Context, name string) (GroceryList, error) {
	row := q.db.QueryRowContext(ctx, createGroceryList, name)
	var i GroceryList
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const deleteGroceryList = `-- name: DeleteGroceryList :one
DELETE FROM grocery_list WHERE id = $1 RETURNING id, name, created_at, version
`

func (q *Queries) DeleteGroceryList(ctx context.Context, id int64) (GroceryList, error) {
	row := q.db.QueryRowContext(ctx, deleteGroceryList, id)
	var i GroceryList
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const getGroceryList = `-- name: GetGroceryList :one
SELECT id, name, created_at, version FROM grocery_list WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGroceryList(ctx context.Context, id int64) (GroceryList, error) {
	row := q.db.QueryRowContext(ctx, getGroceryList, id)
	var i GroceryList
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}

const listGroceryLists = `-- name: ListGroceryLists :many
SELECT id, name, created_at, version FROM grocery_list
`

func (q *Queries) ListGroceryLists(ctx context.Context) ([]GroceryList, error) {
	rows, err := q.db.QueryContext(ctx, listGroceryLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroceryList
	for rows.Next() {
		var i GroceryList
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroceryList = `-- name: UpdateGroceryList :one
UPDATE grocery_list 
SET name = $2, version = version + 1
WHERE id = $1
RETURNING id, name, created_at, version
`

type UpdateGroceryListParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateGroceryList(ctx context.Context, arg UpdateGroceryListParams) (GroceryList, error) {
	row := q.db.QueryRowContext(ctx, updateGroceryList, arg.ID, arg.Name)
	var i GroceryList
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.Version,
	)
	return i, err
}
