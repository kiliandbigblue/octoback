// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/kiliandbigblue/octoback/gen/store/v1"
	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// CreateGroceryItem provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateGroceryItem(ctx context.Context, arg v1.CreateGroceryItemParams) (v1.GroceryItem, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroceryItem")
	}

	var r0 v1.GroceryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.CreateGroceryItemParams) (v1.GroceryItem, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.CreateGroceryItemParams) v1.GroceryItem); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(v1.GroceryItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.CreateGroceryItemParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateGroceryItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroceryItem'
type Querier_CreateGroceryItem_Call struct {
	*mock.Call
}

// CreateGroceryItem is a helper method to define mock.On call
//   - ctx context.Context
//   - arg v1.CreateGroceryItemParams
func (_e *Querier_Expecter) CreateGroceryItem(ctx interface{}, arg interface{}) *Querier_CreateGroceryItem_Call {
	return &Querier_CreateGroceryItem_Call{Call: _e.mock.On("CreateGroceryItem", ctx, arg)}
}

func (_c *Querier_CreateGroceryItem_Call) Run(run func(ctx context.Context, arg v1.CreateGroceryItemParams)) *Querier_CreateGroceryItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.CreateGroceryItemParams))
	})
	return _c
}

func (_c *Querier_CreateGroceryItem_Call) Return(_a0 v1.GroceryItem, _a1 error) *Querier_CreateGroceryItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateGroceryItem_Call) RunAndReturn(run func(context.Context, v1.CreateGroceryItemParams) (v1.GroceryItem, error)) *Querier_CreateGroceryItem_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroceryList provides a mock function with given fields: ctx, name
func (_m *Querier) CreateGroceryList(ctx context.Context, name string) (v1.GroceryList, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroceryList")
	}

	var r0 v1.GroceryList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.GroceryList, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.GroceryList); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(v1.GroceryList)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreateGroceryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroceryList'
type Querier_CreateGroceryList_Call struct {
	*mock.Call
}

// CreateGroceryList is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *Querier_Expecter) CreateGroceryList(ctx interface{}, name interface{}) *Querier_CreateGroceryList_Call {
	return &Querier_CreateGroceryList_Call{Call: _e.mock.On("CreateGroceryList", ctx, name)}
}

func (_c *Querier_CreateGroceryList_Call) Run(run func(ctx context.Context, name string)) *Querier_CreateGroceryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Querier_CreateGroceryList_Call) Return(_a0 v1.GroceryList, _a1 error) *Querier_CreateGroceryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreateGroceryList_Call) RunAndReturn(run func(context.Context, string) (v1.GroceryList, error)) *Querier_CreateGroceryList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroceryItem provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteGroceryItem(ctx context.Context, id int64) (v1.GroceryItem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroceryItem")
	}

	var r0 v1.GroceryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (v1.GroceryItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) v1.GroceryItem); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(v1.GroceryItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_DeleteGroceryItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroceryItem'
type Querier_DeleteGroceryItem_Call struct {
	*mock.Call
}

// DeleteGroceryItem is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) DeleteGroceryItem(ctx interface{}, id interface{}) *Querier_DeleteGroceryItem_Call {
	return &Querier_DeleteGroceryItem_Call{Call: _e.mock.On("DeleteGroceryItem", ctx, id)}
}

func (_c *Querier_DeleteGroceryItem_Call) Run(run func(ctx context.Context, id int64)) *Querier_DeleteGroceryItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_DeleteGroceryItem_Call) Return(_a0 v1.GroceryItem, _a1 error) *Querier_DeleteGroceryItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_DeleteGroceryItem_Call) RunAndReturn(run func(context.Context, int64) (v1.GroceryItem, error)) *Querier_DeleteGroceryItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroceryList provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteGroceryList(ctx context.Context, id int64) (v1.GroceryList, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroceryList")
	}

	var r0 v1.GroceryList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (v1.GroceryList, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) v1.GroceryList); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(v1.GroceryList)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_DeleteGroceryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroceryList'
type Querier_DeleteGroceryList_Call struct {
	*mock.Call
}

// DeleteGroceryList is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) DeleteGroceryList(ctx interface{}, id interface{}) *Querier_DeleteGroceryList_Call {
	return &Querier_DeleteGroceryList_Call{Call: _e.mock.On("DeleteGroceryList", ctx, id)}
}

func (_c *Querier_DeleteGroceryList_Call) Run(run func(ctx context.Context, id int64)) *Querier_DeleteGroceryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_DeleteGroceryList_Call) Return(_a0 v1.GroceryList, _a1 error) *Querier_DeleteGroceryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_DeleteGroceryList_Call) RunAndReturn(run func(context.Context, int64) (v1.GroceryList, error)) *Querier_DeleteGroceryList_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroceryItem provides a mock function with given fields: ctx, id
func (_m *Querier) GetGroceryItem(ctx context.Context, id int64) (v1.GroceryItem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGroceryItem")
	}

	var r0 v1.GroceryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (v1.GroceryItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) v1.GroceryItem); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(v1.GroceryItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetGroceryItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroceryItem'
type Querier_GetGroceryItem_Call struct {
	*mock.Call
}

// GetGroceryItem is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) GetGroceryItem(ctx interface{}, id interface{}) *Querier_GetGroceryItem_Call {
	return &Querier_GetGroceryItem_Call{Call: _e.mock.On("GetGroceryItem", ctx, id)}
}

func (_c *Querier_GetGroceryItem_Call) Run(run func(ctx context.Context, id int64)) *Querier_GetGroceryItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetGroceryItem_Call) Return(_a0 v1.GroceryItem, _a1 error) *Querier_GetGroceryItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetGroceryItem_Call) RunAndReturn(run func(context.Context, int64) (v1.GroceryItem, error)) *Querier_GetGroceryItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroceryList provides a mock function with given fields: ctx, id
func (_m *Querier) GetGroceryList(ctx context.Context, id int64) (v1.GroceryList, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetGroceryList")
	}

	var r0 v1.GroceryList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (v1.GroceryList, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) v1.GroceryList); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(v1.GroceryList)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetGroceryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroceryList'
type Querier_GetGroceryList_Call struct {
	*mock.Call
}

// GetGroceryList is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *Querier_Expecter) GetGroceryList(ctx interface{}, id interface{}) *Querier_GetGroceryList_Call {
	return &Querier_GetGroceryList_Call{Call: _e.mock.On("GetGroceryList", ctx, id)}
}

func (_c *Querier_GetGroceryList_Call) Run(run func(ctx context.Context, id int64)) *Querier_GetGroceryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetGroceryList_Call) Return(_a0 v1.GroceryList, _a1 error) *Querier_GetGroceryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetGroceryList_Call) RunAndReturn(run func(context.Context, int64) (v1.GroceryList, error)) *Querier_GetGroceryList_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroceryItemsByGroceryList provides a mock function with given fields: ctx, groceryListID
func (_m *Querier) ListGroceryItemsByGroceryList(ctx context.Context, groceryListID int64) ([]v1.GroceryItem, error) {
	ret := _m.Called(ctx, groceryListID)

	if len(ret) == 0 {
		panic("no return value specified for ListGroceryItemsByGroceryList")
	}

	var r0 []v1.GroceryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]v1.GroceryItem, error)); ok {
		return rf(ctx, groceryListID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []v1.GroceryItem); ok {
		r0 = rf(ctx, groceryListID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.GroceryItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, groceryListID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_ListGroceryItemsByGroceryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroceryItemsByGroceryList'
type Querier_ListGroceryItemsByGroceryList_Call struct {
	*mock.Call
}

// ListGroceryItemsByGroceryList is a helper method to define mock.On call
//   - ctx context.Context
//   - groceryListID int64
func (_e *Querier_Expecter) ListGroceryItemsByGroceryList(ctx interface{}, groceryListID interface{}) *Querier_ListGroceryItemsByGroceryList_Call {
	return &Querier_ListGroceryItemsByGroceryList_Call{Call: _e.mock.On("ListGroceryItemsByGroceryList", ctx, groceryListID)}
}

func (_c *Querier_ListGroceryItemsByGroceryList_Call) Run(run func(ctx context.Context, groceryListID int64)) *Querier_ListGroceryItemsByGroceryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_ListGroceryItemsByGroceryList_Call) Return(_a0 []v1.GroceryItem, _a1 error) *Querier_ListGroceryItemsByGroceryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_ListGroceryItemsByGroceryList_Call) RunAndReturn(run func(context.Context, int64) ([]v1.GroceryItem, error)) *Querier_ListGroceryItemsByGroceryList_Call {
	_c.Call.Return(run)
	return _c
}

// ListGroceryLists provides a mock function with given fields: ctx
func (_m *Querier) ListGroceryLists(ctx context.Context) ([]v1.GroceryList, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListGroceryLists")
	}

	var r0 []v1.GroceryList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]v1.GroceryList, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []v1.GroceryList); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.GroceryList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_ListGroceryLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGroceryLists'
type Querier_ListGroceryLists_Call struct {
	*mock.Call
}

// ListGroceryLists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Querier_Expecter) ListGroceryLists(ctx interface{}) *Querier_ListGroceryLists_Call {
	return &Querier_ListGroceryLists_Call{Call: _e.mock.On("ListGroceryLists", ctx)}
}

func (_c *Querier_ListGroceryLists_Call) Run(run func(ctx context.Context)) *Querier_ListGroceryLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Querier_ListGroceryLists_Call) Return(_a0 []v1.GroceryList, _a1 error) *Querier_ListGroceryLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_ListGroceryLists_Call) RunAndReturn(run func(context.Context) ([]v1.GroceryList, error)) *Querier_ListGroceryLists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroceryItem provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateGroceryItem(ctx context.Context, arg v1.UpdateGroceryItemParams) (v1.GroceryItem, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroceryItem")
	}

	var r0 v1.GroceryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.UpdateGroceryItemParams) (v1.GroceryItem, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.UpdateGroceryItemParams) v1.GroceryItem); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(v1.GroceryItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.UpdateGroceryItemParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_UpdateGroceryItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroceryItem'
type Querier_UpdateGroceryItem_Call struct {
	*mock.Call
}

// UpdateGroceryItem is a helper method to define mock.On call
//   - ctx context.Context
//   - arg v1.UpdateGroceryItemParams
func (_e *Querier_Expecter) UpdateGroceryItem(ctx interface{}, arg interface{}) *Querier_UpdateGroceryItem_Call {
	return &Querier_UpdateGroceryItem_Call{Call: _e.mock.On("UpdateGroceryItem", ctx, arg)}
}

func (_c *Querier_UpdateGroceryItem_Call) Run(run func(ctx context.Context, arg v1.UpdateGroceryItemParams)) *Querier_UpdateGroceryItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.UpdateGroceryItemParams))
	})
	return _c
}

func (_c *Querier_UpdateGroceryItem_Call) Return(_a0 v1.GroceryItem, _a1 error) *Querier_UpdateGroceryItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_UpdateGroceryItem_Call) RunAndReturn(run func(context.Context, v1.UpdateGroceryItemParams) (v1.GroceryItem, error)) *Querier_UpdateGroceryItem_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroceryList provides a mock function with given fields: ctx, arg
func (_m *Querier) UpdateGroceryList(ctx context.Context, arg v1.UpdateGroceryListParams) (v1.GroceryList, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroceryList")
	}

	var r0 v1.GroceryList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.UpdateGroceryListParams) (v1.GroceryList, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, v1.UpdateGroceryListParams) v1.GroceryList); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(v1.GroceryList)
	}

	if rf, ok := ret.Get(1).(func(context.Context, v1.UpdateGroceryListParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_UpdateGroceryList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroceryList'
type Querier_UpdateGroceryList_Call struct {
	*mock.Call
}

// UpdateGroceryList is a helper method to define mock.On call
//   - ctx context.Context
//   - arg v1.UpdateGroceryListParams
func (_e *Querier_Expecter) UpdateGroceryList(ctx interface{}, arg interface{}) *Querier_UpdateGroceryList_Call {
	return &Querier_UpdateGroceryList_Call{Call: _e.mock.On("UpdateGroceryList", ctx, arg)}
}

func (_c *Querier_UpdateGroceryList_Call) Run(run func(ctx context.Context, arg v1.UpdateGroceryListParams)) *Querier_UpdateGroceryList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.UpdateGroceryListParams))
	})
	return _c
}

func (_c *Querier_UpdateGroceryList_Call) Return(_a0 v1.GroceryList, _a1 error) *Querier_UpdateGroceryList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_UpdateGroceryList_Call) RunAndReturn(run func(context.Context, v1.UpdateGroceryListParams) (v1.GroceryList, error)) *Querier_UpdateGroceryList_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
